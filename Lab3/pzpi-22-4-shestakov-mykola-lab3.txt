Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії




ЗВІТ
з лабораторна робота
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Розробка web застосунку»






Виконав 
ст. гр. ПЗПІ-22-4
Шестаков Микола Саркісович

Перевірив
асистент кафедри ПІ
Дашенков Дмитро Сергійович 




Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	21.05.2025	0.1	Створено розділ «Завдання»
2	24.05.2025	0.2	Створено розділ «Опис виконаної роботи»
3	26.05.2025	0.3	Додано графічні матеріали
4	30.05.2025	0.4	Заповнення додатку Б з програмним кодом

1 ЗАВДАННЯ

	Завданням роботи є розробити front-end частину програмної системи для автоматичного догляду за рослинами GrowMate, а також побудувати UML діаграми прецедентів, компонентів, діяльності та пакетів для нього.

2 ОПИС ВИКОНАНОЇ РОБОТИ

	Виконання лабораторної роботи включало:
    1. Побудову UML діаграми прецедентів (див. Додаток А);
    2. Побудову UML діаграми компонентів (див. Додаток А);
    3. Побудову UML діаграми діяльності (див. Додаток А);
    4. Побудову UML діаграми пакетів (див. Додаток А);
    5. Розробку web додатку за допомогою фреймворку React.js. Додаток надає користувачам функціональність, описану у Vision & Scope документі програмної системи (реєстрація та вхід, перегляд списку девайсів, додавання нового девайсу, перегляд та редагування інформації про девайс, обирання чи створення нового розкладу поливу для девайсу, перегляд системних сповіщень, перегляд та редагування інформації про користувача). Web додаток також підтримує локалізацію (українська та англійська мови), яку було реалізовано за допомогою бібліотеки i18next. Під час розробки додатку використовувалися середа розробки Visual Studio, фреймворк React.js, Vite.js, мова програмування JavaScript, а також HTML та CSS.

ВИСНОВКИ

В ході виконання лабораторної роботи було створено UML діаграми прецедентів, компонентів, діяльності та пакетів.
Для розробки веб додатку використовувалися середа розробки Visual Studio, фреймворк React.js, Vite.js, мова програмування JavaScript, а також HTML та CSS.



ДОДАТОК А
Графічні матеріали


Рисунок А.1 — UML-діаграма прецедентів


Рисунок А.2 — UML-діаграма компонентів

Рисунок А.3 — UML-діаграма діяльності


Рисунок А.4 — UML-діаграма пакетів


ДОДАТОК Б
Програмний код

Б.1 Взаємодія з сервером (використовувані функції)
GitHub репозиторій: api.js

1 export async function apiPost(path, body, token = null) {
2     const res = await fetch(`/api/${path}`, {
3         method: "POST",
4         headers: {
5             "Content-Type": "application/json",
6             ...(token && { Authorization: `Bearer ${token}` })
7         },
8         body: JSON.stringify(body),
9     });
10     return res;
11 }
12 
13 export async function apiGet(path, token = null, queryParams = {}) {
14     const query = new URLSearchParams(queryParams).toString();
15     const url = `/api/${path}${query ? `?${query}` : ""}`;
16 
17     const res = await fetch(url, {
18         method: "GET",
19         headers: {
20             ...(token && { Authorization: `Bearer ${token}` }),
21         },
22     });
23     return res;
24 }
25 
26 export async function apiPut(path, formData, token = null) {
27     const res = await fetch(`/api/${path}`, {
28         method: "PUT",
29         headers: {
30             ...(token && { Authorization: `Bearer ${token}` }),
31             
32         },
33         body: formData,
34     });
35     return res;
36 }

Б.2 Взаємодія з сервером (отримання інформації про девайс)
GitHub репозиторій: DeviceDetailPage.jsx

1 const fetchDeviceDetails = async () => {
2     if (!token) {
3         const navigate = useNavigate();
4         navigate("/login");
5     }
6 
7     const res = await apiGet(`device/${id}`, token);
8 
9     if (res.ok) {
10         const data = await res.json();
11         console.log("Data:", data);
12         setDevice(data.data);
13 
14         if (data.data.imageExtension != null) {
15             fetchImage();
16         }
17     }
18 };

Б.3 Налаштування локалізації
GitHub репозиторій: RegisterPage.jsx

1 import translationEN from "./locales/translation_en.json";
2 import translationUK from "./locales/translation_uk.json";
3 
4 i18n
5     .use(LanguageDetector)
6     .use(initReactI18next)
7     .init({
8         fallbackLng: "en",
9         debug: false,
10         interpolation: {
11             escapeValue: false,
12         },
13         resources: {
14             en: { translation: translationEN },
15             uk: { translation: translationUK },
16         },
17     });
18 
19 export default i18n;

Б.4 Головний header (навігація додатком)
GitHub репозиторій: MainHeader.jsx

1 export default function MainHeader() {
2     const [user, setUser] = useState(null);
3     const [imageUrl, setImageUrl] = useState(null);
4     const token = localStorage.getItem("token");
5     const navigate = useNavigate();
6     const { t } = useTranslation();
7 
8     useEffect(() => {
9         if (!token) {
10             navigate("/");
11         }
12 
13         const fetchUser = async () => {
14             const res = await apiGet("appuser/current-user", token);
15             if (res.ok) {
16                 const data = await res.json();
17                 setUser(data.data);
18             } else {
19                 navigate("/");
20             }
21         };
22 
23         const fetchImage = async () => {
24             const res = await apiGet("appuser/image", token);
25             if (res.ok) {
26                 const blob = await res.blob();
27                 setImageUrl(URL.createObjectURL(blob));
28             }
29         };
30 
31         fetchUser();
32         fetchImage();
33     }, []);
34 
35     return (
36         <header className="header">
37             <h1 className="app-name">{t("appName")}</h1>
38             <nav className="nav-links">
39                 <LanguageSwitcher />
40                 <Link to="/devices">{t("nav.devices")}</Link>
41                 <Link to="/notifications">{t("nav.notifications")}</Link>
42                 {user && (
43                     <Link to="/account" className="user-profile">
44                         {imageUrl ? (
45                             <img src={imageUrl} alt={t("alt.profile")} className="profile-img" />
46                         ) : (
47                             <div className="profile-placeholder">{user.name[0]}</div>
48                         )}
49                         <span>{user.name} {user.surname}</span>
50                     </Link>
51                 )}
52             </nav>
53         </header>
54     );
55 }

Б.5 Компонент реєстрації
GitHub репозиторій: RegisterPage.jsx

1 export default function RegisterPage() {
2     const { t } = useTranslation();
3     const [form, setForm] = useState({
4         name: "",
5         surname: "",
6         email: "",
7         password: "",
8         repeatPassword: ""
9     });
10 
11     const navigate = useNavigate();
12     const [error, setError] = useState("");
13 
14     const handleChange = (e) => {
15         setForm({ ...form, [e.target.name]: e.target.value });
16     };
17 
18     const handleSubmit = async (e) => {
19         e.preventDefault();
20         const res = await apiPost("appUser/register", form);
21         if (res.ok) {
22             const data = await res.json();
23             localStorage.setItem("token", data.data);
24             navigate("/home");
25         } else {
26             const message = await res.text();
27             setError(message || t("register.errorDefault"));
28         }
29     };
30 
31     return (
32         <div className="auth-component">
33             <h2>{t("register.title")}</h2>
34             <form className="auth-form" onSubmit={handleSubmit}>
35                 <input name="name" placeholder={t("register.name")} onChange={handleChange} /><br />
36                 <input name="surname" placeholder={t("register.surname")} onChange={handleChange} /><br />
37                 <input name="email" placeholder={t("register.email")} type="email" onChange={handleChange} /><br />
38                 <input name="password" placeholder={t("register.password")} type="password" onChange={handleChange} /><br />
39                 <input name="repeatPassword" placeholder={t("register.repeatPassword")} type="password" onChange={handleChange} /><br />
40                 <div className="button-wrapper">
41                     <button type="submit">{t("register.button")}</button>
42                 </div>
43             </form>
44             {error && <p style={{ color: "red" }}>{error}</p>}
45             <p>
46                 {t("register.haveAccount")} <a href="/login">{t("register.loginLink")}</a>
47             </p>
48         </div>
49     );
50 }



