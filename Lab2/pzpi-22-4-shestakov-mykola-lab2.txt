Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Розробка мобільного застосунку»






Виконав 
ст. гр. ПЗПІ-22-4
Шестаков Микола Саркісович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович




Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	11.05.2025	0.1	Створено розділ «Завдання»
2	14.05.2025	0.2	Створено розділ «Опис виконаної роботи»
3	16.05.2025	0.3	Додано графічні матеріали
4	20.05.2025	0.4	Заповнення додатку Б з програмним кодом

1 ЗАВДАННЯ

	Завданням роботи є розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи для програмної системи для автоматичного догляду за рослинами GrowMate, а також побудувати UML діаграми прецедентів, компонентів, діяльності та пакетів для нього.

2 ОПИС ВИКОНАНОЇ РОБОТИ

	Виконання лабораторної роботи включало:
    1. Побудову UML діаграми прецедентів (див. Додаток А);
    2. Побудову UML діаграми компонентів (див. Додаток А);
    3. Побудову UML діаграми діяльності (див. Додаток А);
    4. Побудову UML діаграми пакетів (див. Додаток А);
    5. Розробку мобільного додатку для мобільної платформи Android на мові програмування Kotlin. Мобільний додаток надає користувачам системи обмежений функціонал для екстреного управління нею та включає функції вказані в Vision & Scope документі програмної системи (вхід в систему, перегляд списку девайсів, перегляд інформації про певний девайс, відправку запиту на полив). Під час розробки мобільного додатку використовувалася середа розробки Android Studio. Для зв’язку з сервером використовувалася бібліотека Retrofit а також Dev Tunnels (на боці серверу). Під час розробки мобільного додатку до серверної частини системи було внесено певні зміни – для підтримання отримання даних від серверу в мобільному додатку в грамотному форматі, а також для грамотнішої організації сесій у фреймворці багатоплатформеності (тепер початі та завершені сесії зберігаються в базі даних, а не в cookies браузеру).

ВИСНОВКИ

В ході виконання лабораторної роботи було створено UML діаграми прецедентів, компонентів, діяльності та пакетів.
Для розробки мобільного додатку використовувалися середа розробки Android Studio та мова програмування Kotlin. Додаток розроблявся під мобільну платформу Android.


ДОДАТОК А
Графічні матеріали


Рисунок А.1 — UML-діаграма прецедентів


Рисунок А.2 — UML-діаграма компонентів


Рисунок А.3 — UML-діаграма діяльності


Рисунок А.4 — UML-діаграма пакетів


ДОДАТОК Б
Програмний код

Б.1 Взаємодія з сервером (інтерфейс із запитами)
GitHub репозиторій: ApiService.kt

1 interface ApiService {
2     @POST("appUser/login")
3     fun login(@Body model: LoginModel): Call<ApiResponse<String>> // token
4 
5     @POST("appUser/logout")
6     fun logout(@Header("Authorization") token: String):
7             Call<ApiResponse<String>>
8 
9     @GET("appUser/current-user")
10     fun getUser(
11         @Header("Authorization") token: String
12     ): Call<ApiResponse<UserModel>>
13 
14     @GET("device/all")
15     fun getDevices(@Header("Authorization") token: String):
16             Call<ApiListResponse<DeviceListItemModel>>
17 
18     @GET("device/{id}")
19     fun getDevice(
20         @Header("Authorization") token: String,
21         @Path("id") id: Int
22     ): Call<ApiResponse<DeviceModel>>
23 
24     @GET("device/{id}/image")
25     fun getDeviceImage(
26         @Header("Authorization") token: String,
27         @Path("id") id: Int
28     ): Call<ResponseBody>
29 
30     @POST("device/manual-watering-request")
31     fun manualWateringRequest(@Body model: ManualWateringRequestModel):
32             Call<ApiResponse<String>>
33 }

Б.2 Взаємодія з сервером (Retrofit-клієнт)
GitHub репозиторій: RetrofitClient.kt

1 object RetrofitClient {
2     private const val BASE_URL = "https://18f49xqj-7041.uks1.devtunnels.ms/api/"
3 
4     private val logging = HttpLoggingInterceptor().apply {
5         setLevel(HttpLoggingInterceptor.Level.BODY)
6     }
7 
8     private val client = OkHttpClient.Builder()
9         .addInterceptor(logging)
10         .build()
11 
12     val instance: ApiService by lazy {
13         Retrofit.Builder()
14             .baseUrl(BASE_URL)
15             .addConverterFactory(GsonConverterFactory.create())
16             .client(client)
17             .build()
18             .create(ApiService::class.java)
19     }
20 }

Б.3 Взаємодія з сервером (отримання даних через Retrofit-клієнт)
GitHub репозиторій: DeviceDetailViewModel.kt

1 fun fetchDevice() {
2     val call = RetrofitClient.instance.getDevice("Bearer $token", deviceId)
3 
4     call.enqueue(object : Callback<ApiResponse<DeviceModel>> {
5         override fun onResponse(call: Call<ApiResponse<DeviceModel>>,
6                                 response: Response<ApiResponse<DeviceModel>>) {
7             if (response.isSuccessful && response.body() != null) {
8                 _device.postValue(Result.success(response.body()!!.data!!))
9             } else {
10                 val error = response.errorBody()?.string() ?: "Failed to load device"
11                 _device.postValue(Result.failure(Exception(error)))
12             }
13         }
14 
15         override fun onFailure(call: Call<ApiResponse<DeviceModel>>, t: Throwable) {
16             _device.postValue(Result.failure(t))
17         }
18     })
19 }

Б.4 Фрагмент із деталями про девайс (отримання даних з серверу та оновлення користувацького виводу)
GitHub репозиторій: DeviceDetailFragment.kt

1 class DeviceDetailFragment : Fragment() {
2     private lateinit var viewModel: DeviceDetailViewModel
3 
4     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
5         val view = inflater.inflate(R.layout.fragment_device_detail, container, false)
6         val nameText: TextView = view.findViewById(R.id.text_device_name)
7         val descriptionText: TextView = view.findViewById(R.id.text_device_description)
8         val automaticWateringText: TextView = view.findViewById(R.id.text_device_automatic_watering_value)
9         val waterLevelText: TextView = view.findViewById(R.id.text_device_water_level_value)
10         val lastWateringText: TextView = view.findViewById(R.id.text_device_last_watering_value)
11         val moistureText: TextView = view.findViewById(R.id.text_device_moisture_value)
12         val tempText: TextView = view.findViewById(R.id.text_device_temp_value)
13         val criticalMinMoistureText: TextView = view.findViewById(R.id.text_device_critical_min_moisture)
14         val criticalMaxMoistureText: TextView = view.findViewById(R.id.text_device_critical_max_moisture)
15         val criticalMinTempText: TextView = view.findViewById(R.id.text_device_critical_min_temp)
16         val criticalMaxTempText: TextView = view.findViewById(R.id.text_device_critical_max_temp)
17         val wateringButton: Button = view.findViewById(R.id.button_watering)
18         val imageDevice: ImageView = view.findViewById(R.id.image_device)
19 
20         val id = arguments?.getInt("deviceId") ?: return view
21         val token = AuthManager.getToken(requireContext()) ?: return view
22 
23         viewModel = ViewModelProvider(this)[DeviceDetailViewModel::class.java]
24         viewModel.deviceId = id
25         viewModel.token = token
26 
27         viewModel.fetchDevice()
28 
29         viewModel.device.observe(viewLifecycleOwner) { result ->
30             result.onSuccess {
31                 nameText.text = it.name
32                 descriptionText.text = it.description
33                 automaticWateringText.text = if (it.automaticWatering) "ON" else "OFF"
34                 waterLevelText.text = "${it.waterLevel}%"
35                 lastWateringText.text = it.lastWatering
36                 moistureText.text = "${it.currentMoisture}%"
37                 tempText.text = "${it.currentTemperature}°C"
38                 criticalMinMoistureText.text = "${it.criticalMinMoisture}%"
39                 criticalMaxMoistureText.text = "${it.criticalMaxMoisture}%"
40                 criticalMinTempText.text = "${it.criticalMinTemperature}°C"
41                 criticalMaxTempText.text = "${it.criticalMaxTemperature}°C"
42                 wateringButton.setOnClickListener {
43                     val dialogView = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_watering_duration, null)
44                     val inputField = dialogView.findViewById<EditText>(R.id.input_watering_duration)
45 
46                     AlertDialog.Builder(requireContext())
47                         .setTitle("Enter Data")
48                         .setView(dialogView)
49                         .setPositiveButton("Confirm") { dialog, _ ->
50                             val duration = inputField.text.toString().toIntOrNull()
51                             if (duration != null) {
52                                 viewModel.scheduleWatering(duration)
53                             } else {
54                                 Toast.makeText(context, "Invalid input", Toast.LENGTH_SHORT).show()
55                             }
56                             dialog.dismiss()
57                         }
58                         .setNegativeButton("Cancel") { dialog, _ ->
59                             dialog.dismiss()
60                         }
61                         .show()
62                 }
63 
64                 if (it.imageExtension != null) {
65                     viewModel.fetchDeviceImage()
66                 }
67             }
68             result.onFailure {
69                 Toast.makeText(context, "Failed to load device", Toast.LENGTH_SHORT).show()
70             }
71         }
72 
73         viewModel.deviceImage.observe(viewLifecycleOwner) { result ->
74             result.onSuccess {
75                 imageDevice.setImageBitmap(it)
76             }
77             result.onFailure {
78                 Toast.makeText(context, "Failed to load device image", Toast.LENGTH_SHORT).show()
79             }
80         }
81 
82         viewModel.wateringRequestResult.observe(viewLifecycleOwner) { result ->
83             result.onSuccess {
84                 Toast.makeText(context, "Watering request sent", Toast.LENGTH_SHORT).show()
85             }
86             result.onFailure {
87                 Toast.makeText(context, "Failed to send watering request", Toast.LENGTH_SHORT)
88                     .show()
89             }
90         }
91 
92         return view
93     }
94 }

Б.5 Менеджмент токену сесії
GitHub репозиторій: AuthManager.kt

1 object AuthManager {
2     fun getToken(context: Context): String? =
3         context.getSharedPreferences("auth", Context.MODE_PRIVATE).getString("token", null)
4 
5     fun setToken(context: Context, token: String) {
6         context.getSharedPreferences("auth", Context.MODE_PRIVATE).edit() {
7             putString(
8                 "token",
9                 token
10             )
11         }
12     }
13 
14     fun clear(context: Context) {
15         context.getSharedPreferences("auth", Context.MODE_PRIVATE).edit() { clear() }
16     }
17 }
